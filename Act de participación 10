{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNMXoz04nw0F2tlo6pugr/d"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"IxzBN_x3JDwE"},"outputs":[],"source":["\n","from abc import ABC, abstractmethod\n","\n","class ReglaValidacion(ABC):\n","    def __init__(self, longitud_esperada):\n","        self._longitud_esperada = longitud_esperada\n","\n","    def _validar_longitud(self, clave):\n","        return len(clave) > self._longitud_esperada\n","\n","    def _contiene_mayuscula(self, clave):\n","        return any(char.isupper() for char in clave)\n","\n","    def _contiene_minuscula(self, clave):\n","        return any(char.islower() for char in clave)\n","\n","    def _contiene_numero(self, clave):\n","        return any(char.isdigit() for char in clave)\n","\n","    @abstractmethod\n","    def es_valida(self, clave):\n","        pass\n","\n","class ReglaValidacionGanimedes(ReglaValidacion):\n","    def __init__(self):\n","        super().__init__(8)\n","\n","    def _contiene_caracter_especial(self, clave):\n","        caracteres_especiales = \"@_#$%\"\n","        return any(char in caracteres_especiales for char in clave)\n","\n","    def es_valida(self, clave):\n","        if not self._validar_longitud(clave):\n","            raise LongitudError(\"La clave debe tener más de 8 caracteres.\")\n","        if not self._contiene_mayuscula(clave):\n","            raise MayusculaError(\"La clave debe contener al menos una letra mayúscula.\")\n","        if not self._contiene_minuscula(clave):\n","            raise MinusculaError(\"La clave debe contener al menos una letra minúscula.\")\n","        if not self._contiene_numero(clave):\n","            raise NumeroError(\"La clave debe contener al menos un número.\")\n","        if not self._contiene_caracter_especial(clave):\n","            raise CaracterEspecialError(\"La clave debe contener al menos un caracter especial.\")\n","        return True\n","\n","class ReglaValidacionCalisto(ReglaValidacion):\n","    def __init__(self):\n","        super().__init__(6)\n","\n","    def _contiene_calisto(self, clave):\n","        calisto = \"calisto\"\n","        posiciones = [i for i, char in enumerate(clave.lower()) if char in calisto]\n","        mayusculas = sum(1 for char in clave if char.isupper())\n","        return len(posiciones) >= 7 and 2 <= mayusculas < len(calisto)\n","\n","    def es_valida(self, clave):\n","        if not self._validar_longitud(clave):\n","            raise LongitudError(\"La clave debe tener más de 6 caracteres.\")\n","        if not self._contiene_numero(clave):\n","            raise NumeroError(\"La clave debe contener al menos un número.\")\n","        if not self._contiene_calisto(clave):\n","            raise CalistoError(\"La clave debe contener la palabra 'calisto' con al menos dos letras en mayúscula.\")\n","        return True"]},{"cell_type":"code","source":["class LongitudError(Exception):\n","    pass\n","\n","class MayusculaError(Exception):\n","    pass\n","\n","class MinusculaError(Exception):\n","    pass\n","\n","class NumeroError(Exception):\n","    pass\n","\n","class CaracterEspecialError(Exception):\n","    pass\n","\n","class CalistoError(Exception):\n","    pass"],"metadata":{"id":"iCRstlmbJNXb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Validador:\n","    def __init__(self, regla):\n","        self._regla = regla\n","\n","    def es_valida(self, clave):\n","        return self._regla.es_valida(clave)"],"metadata":{"id":"icphl3qKJSYB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from reglas import ReglaValidacionGanimedes, ReglaValidacionCalisto\n","from validador import Validador\n","\n","clave_ganimedes = \"Abcdefg1@\"\n","clave_calisto = \"cAlIsTo123\"\n","\n","validador_ganimedes = Validador(ReglaValidacionGanimedes())\n","validador_calisto = Validador(ReglaValidacionCalisto())\n","\n","try:\n","    print(validador_ganimedes.es_valida(clave_ganimedes))  # Debería retornar True\n","except Exception as e:\n","    print(f\"Validación Ganímedes fallida: {e}\")\n","\n","try:\n","    print(validador_calisto.es_valida(clave_calisto))  # Debería retornar True\n","except Exception as e:\n","    print(f\"Validación Calisto fallida: {e}\")"],"metadata":{"id":"gBqKHkGxJW9b","colab":{"base_uri":"https://localhost:8080/","height":732},"executionInfo":{"status":"error","timestamp":1717016683010,"user_tz":300,"elapsed":1133,"user":{"displayName":"Valeria Fernandez","userId":"14554576123499851393"}},"outputId":"def8ccca-32a8-4151-bf01-45305e9c0d3b"},"execution_count":1,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"No module named 'reglas'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-260ece02949e>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mreglas\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mReglaValidacionGanimedes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mReglaValidacionCalisto\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mvalidador\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mValidador\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mclave_ganimedes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"Abcdefg1@\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mclave_calisto\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"cAlIsTo123\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'reglas'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}]}]}